[tool.poetry]
name = "gradient-descent"
version = "0.1.0"
description = "gradient descent with linear regression and logistic regression"
authors = ["Ming Li <ming.george.li@gmail.com>"]
license = "MIT License"
readme = "README.md"
packages = [{include = "gradient_descent"}]

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^1.24.2"
torch = "^2.0.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.2.0"
pylint = "^2.17.2"
black = "^23.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true

[tool.black]
target-version = ['py39']
line-length = 120
include_trailing_comma = false
include = '(atlassian|examples|tests)\/.*(\.py|GET|POST)'

[tool.pylint.format]
max-line-length = 120

[tool.pylint.MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=''

# Specify a score threshold to be exceeded before program exits with error.
fail-under='10.0'

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore='.git'

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=''

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=0

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=''

# Pickle collected data for later comparisons.
persistent='yes'

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode='yes'

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension='no'


[tool.pylint."MESSAGES CONTROL"]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=''

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
generated-members='''numpy.*, torch.*'''
disable='''
        missing-module-docstring,
        missing-class-docstring,
        missing-function-docstring,
        invalid-name,
        arguments-differ,
        too-many-arguments,
'''